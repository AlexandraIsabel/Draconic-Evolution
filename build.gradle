import org.apache.tools.ant.filters.ReplaceTokens
//apply plugin: 'net.minecraftforge.gradle.forge'
//apply plugin: 'maven'
//apply plugin: 'maven-publish'

plugins {
    id "maven-publish"
    id "idea"
    id "net.minecraftforge.gradle" version "5.+"
    id "wtf.gofancy.fancygradle" version "1.1.+"
}

repositories {
	maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        name 'CB Maven'
        url "https://chickenbones.net/maven/"
    }
    maven {
        name 'OC Maven'
        url "https://maven.cil.li/"
    }
    maven {
        name "JEI Maven."
        url "https://dvs1.progwml6.com/files/maven"
    }
}

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}-${config.mod_version}"
group = "com.brandon3055.draconicevolution"
archivesBaseName = "Draconic-Evolution"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

minecraft {
   mappings channel: "snapshot", version: "20171003-1.12"
    accessTransformer = file("src/main/resources/DraconicEvolution_at.cfg")
    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "info"
        }

        server {

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "info"
        }
    }
    //makeObfSourceJar = false
    //replace '${mod_version}', project.config.mod_version
    //replaceIn "DraconicEvolution.java"
    /* version = config.mc_version + "-" + config.forge_version
    runDir = "run"
    mappings = "${config.mappings}"
    replace '${mod_version}', project.config.mod_version
    replaceIn "DraconicEvolution.java"
    makeObfSourceJar = false*/
}

String buildNo = "193"
if (System.getenv("BUILD_NUMBER") != null) {
    buildNo = System.getenv("BUILD_NUMBER")
}
version = version + ".${buildNo}"
sourceSets {
    api {
        java {
        }
    }
}
dependencies {
    minecraft("net.minecraftforge:forge:1.12.2-14.23.5.2860")
    apiImplementation("net.minecraftforge:forge:1.12.2-14.23.5.2860_mapped_snapshot_20171003-1.12_at_da284b422f0f3571f88e0d6ad151880ca95d6064")
    implementation(sourceSets.api.output)
    implementation "com.brandon3055.brandonscore:BrandonsCore:${config.mc_version}-${config.bcore_version}:deobf"
    implementation "com.brandon3055.projectintelligence:ProjectIntelligence:${config.mc_version}-${config.pi_version}:deobf"
    implementation "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
    implementation "li.cil.oc:OpenComputers:${config.oc_version}:api"
    implementation "mezz.jei:jei_${config.mc_version}:${config.jei_version}"
	implementation "cofh:RedstoneFlux:${config.rf_mc_version}-${config.rf_version}:deobf"
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mc_version", config.mc_version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                // replace version and mc_version
                expand 'version': project.version, 'mc_version': config.mc_version, 'mod_version': config.mod_version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            rename '(.+_at.cfg)', 'META-INF/$1'
            duplicatesStrategy = 'include'
        }
task replaceTokens(type: Sync) {
    // replace @TOKENS@ in main file
    from sourceSets.main.java
    inputs.property 'version', project.version
    inputs.property "mc_version", config.mc_version
    filter(ReplaceTokens, tokens: [mod_version: config.mod_version.toString()])
    into "$buildDir/src"
}

compileJava {
    dependsOn "replaceTokens"
    source = replaceTokens.outputs
}

def commonManifest = {
    attributes 'FMLAT': 'DraconicEvolution_at.cfg'
}

jar {
    classifier = 'universal'
    manifest commonManifest
    //finalizedBy reobfJar
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

/*uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven") || project.hasProperty("maven_pass")) {
                if (project.hasProperty("maven_pass")) {
                    println "Uploading to remote maven."
                    repository(url: "http://maven-upload.covers1624.net/") {
                        authentication(userName: "brandon3055", password: project.getProperty("maven_pass"))
                    }
                } else {
                    println "Uploading to local maven."
                    repository(url: "file://${local_maven}")

                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Draconic-Evolution'
                        url 'https://github.com/brandon3055/Draconic-Evolution'
                        scm {
                            url 'https://github.com/brandon3055/Draconic-Evolution'
                            connection 'scm:git:git@github.com:brandon3055/Draconic-Evolution.git'
                            developerConnection 'scm:git:git@github.com:brandon3055/Draconic-Evolution.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/brandon3055/Draconic-Evolution/issues'
                        }
                        licenses {
                            license {
                                name 'License'
                                url 'https://raw.githubusercontent.com/brandon3055/Draconic-Evolution/master/LICENSE.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'brandon3055'
                                name 'brandon3055'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}*/
fancyGradle {
    patches {
        resources
        coremods
        asm
    }
}